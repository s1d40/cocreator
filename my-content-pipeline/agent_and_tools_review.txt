## Agent and Tool Logic Review

This review provides a comprehensive overview of each agent and tool in the pipeline, their purpose, how they interact, and identifies potential areas for improvement or edge cases.

### Agents:

1.  **`research_agent` (in `app/agent.py`)**
    *   **Purpose:** Acts as a research assistant, performing web searches and summarizing findings.
    *   **Tools Used:** Primarily `google_search`.
    *   **Callbacks:** Utilizes `collect_research_sources_callback` to gather source information and `citation_replacement_callback` to format citations in the final report.
    *   **Robustness Considerations:**
        *   How does it handle scenarios where `google_search` yields no relevant results?
        *   Is the summarization effective for varying lengths and complexities of content?
        *   How reliable is the citation generation, especially with diverse search result formats?

2.  **`image_agent` (in `test_image_agent.py`)**
    *   **Purpose:** A dedicated agent for testing the `generate_image` tool.
    *   **Tools Used:** `generate_image`.
    *   **Robustness Considerations:** This agent is purely for testing the image generation tool in isolation and is not part of the main application's operational pipeline.

3.  **`speech_agent` (in `test_speech_agent.py`)**
    *   **Purpose:** A dedicated agent for testing the `synthesize_voiceover` tool.
    *   **Tools Used:** `synthesize_voiceover`.
    *   **Robustness Considerations:** Similar to `image_agent`, this is for isolated testing and not part of the main pipeline.

### Tools (in `app/tools.py`):

1.  **`extract_content_from_url(url: str)`**
    *   **Purpose:** Fetches and extracts plain text content from a given URL.
    *   **Logic:** Uses `requests` to fetch the URL and `BeautifulSoup` to parse HTML and remove script/style tags before extracting text. Includes basic `try-except` for `requests.exceptions.RequestException`.
    *   **Robustness Considerations:**
        *   Handles non-HTML content (e.g., PDFs, images directly linked)? Currently, it will likely return an error or unparsed binary data.
        *   What if the URL is invalid, malformed, or points to a very large file?
        *   Does it handle different character encodings correctly?

2.  **`analyze_themes(text: str, num_topics: int = 5, num_words: int = 5)`**
    *   **Purpose:** Analyzes text to extract themes using LDA topic modeling.
    *   **Logic:** Uses `CountVectorizer` for text preprocessing and `gensim.models.LdaModel` for topic modeling.
    *   **Robustness Considerations:**
        *   How does it perform with very short or empty input text?
        *   Are the extracted themes always meaningful or coherent, especially for diverse or unstructured text?
        *   Does it handle texts in languages other than English (as `stop_words='english'` is hardcoded)?

3.  **`generate_image(prompt: str, tool_context: ToolContext)`**
    *   **Purpose:** Generates an image from a text prompt using `imagen-4.0-generate-preview-06-06`.
    *   **Logic:** Calls `image_model.generate_images()`, saves the raw bytes to a local `generated_images` directory, and then saves it as an artifact. Includes a custom return message for in-memory artifacts.
    *   **Robustness Considerations:**
        *   Error handling for cases where image generation fails (e.g., due to inappropriate prompts, API limits, or internal model errors).
        *   What if `images[0]._image_bytes` is not available or malformed?
        *   Ensuring the `generated_images` directory creation is robust across different OS.

4.  **`synthesize_voiceover(text: str, voice_name: str = "en-US-Neural2-D", tool_context: ToolContext = None)`**
    *   **Purpose:** Converts text to speech using Google Cloud Text-to-Speech API.
    *   **Logic:** Initializes `texttospeech.TextToSpeechClient()`, constructs input/voice/audio configs, calls `client.synthesize_speech()`, saves audio content to a local `generated_audio` directory, and then saves it as an artifact.
    *   **Robustness Considerations:**
        *   Error handling for TTS failures (e.g., API limits, invalid voice names, very long text).
        *   Ensuring the `generated_audio` directory creation is robust.
        *   What if `response.audio_content` is empty or malformed?

5.  **`synthesize_voiceover_with_random_voice(text: str, tool_context: ToolContext)`**
    *   **Purpose:** A wrapper that calls `synthesize_voiceover` with a randomly selected voice from predefined lists.
    *   **Logic:** Randomly selects a voice and passes it to `synthesize_voiceover`.
    *   **Robustness Considerations:** Directly inherits robustness from `synthesize_voiceover`. Ensures voice lists are not empty.

6.  **`convert_to_markdown(text: str, image_urls: list[str])`**
    *   **Purpose:** Converts text to Markdown and embeds images.
    *   **Logic:** Uses `markdownify` to convert text and appends Markdown image syntax for provided URLs.
    *   **Robustness Considerations:**
        *   Handles empty `image_urls` list gracefully.
        *   Ensures `image_urls` are valid URLs (though the function itself doesn't validate them).

7.  **`create_video_from_assets(image_paths: list[str], audio_path: str, tool_context: ToolContext)`**
    *   **Purpose:** Creates a video from a list of image paths and an audio file path using `moviepy`.
    *   **Logic:** Uses `moviepy` to create image clips, concatenate them, set audio, and write the final video file. Saves the video as an artifact.
    *   **Robustness Considerations:**
        *   Error handling for missing image/audio files, invalid paths, or `moviepy` processing errors.
        *   Performance with a large number of images or very long audio.
        *   Ensuring temporary directory creation and cleanup.
        *   What if `audio_clip.duration` is zero or `len(image_paths)` is zero? (Division by zero).

### Callbacks (in `app/tools.py`):

1.  **`collect_research_sources_callback(callback_context: CallbackContext)`**
    *   **Purpose:** Collects and organizes web research sources from agent events (specifically `google_search` results) for citation.
    *   **Logic:** Iterates through session events, extracts `grounding_metadata` (URLs, titles, snippets), and stores them in `session.state`.
    *   **Robustness Considerations:**
        *   Handles cases where `grounding_metadata` is missing or malformed in events.
        *   Ensures unique short IDs for sources.
        *   Scalability with a very large number of search results.

2.  **`citation_replacement_callback(callback_context: CallbackContext)`**
    *   **Purpose:** Replaces custom `<cite>` tags in a report with Markdown-formatted links using collected source information.
    *   **Logic:** Uses regex to find `<cite>` tags and replaces them with formatted links based on `sources` in `session.state`.
    *   **Robustness Considerations:**
        *   Handles cases where a `src-ID_NUMBER` in a `<cite>` tag does not exist in the `sources` dictionary.
        *   Ensures regex is robust and doesn't accidentally replace unintended text.
        *   Correctly handles edge cases in Markdown formatting.

### Future Product Considerations:

*   **Tiered Subscription Plans:** Explore offering different subscription tiers based on model capabilities:
    *   "Flash Thinking" plan: Utilizes cost-effective `gemini-2.5-flash` for faster, token-optimized responses.
    *   "Pro Thinking" plan: Leverages `gemini-2.5-pro` for more advanced reasoning and complex tasks.
    *   **Imagen Model Tiers:** Offer varying image generation quality and speed based on different Imagen models (e.g., `imagen-4.0-fast-generate-preview-06-06` for speed, `imagen-4.0-ultra-generate-preview-06-06` for highest quality).
